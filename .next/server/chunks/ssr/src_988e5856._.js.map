{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/lib/safetyFeatures.ts"],"sourcesContent":["'use client';\n\n// Safety features for the SolBotX trading bot\nexport interface Position {\n  id: string;\n  pair: string;\n  entryPrice: number;\n  amount: number;\n  timestamp: string;\n  action: 'buy' | 'sell';\n}\n\nexport interface StopLossConfig {\n  enabled: boolean;\n  percentage: number; // Percentage drop that triggers stop loss\n}\n\n// Default stop loss configuration with 2.5% as requested by user\nexport const DEFAULT_STOP_LOSS_CONFIG: StopLossConfig = {\n  enabled: true,\n  percentage: 2.5\n};\n\n// Check if stop loss should be triggered\nexport const checkStopLoss = (\n  position: Position,\n  currentPrice: number,\n  stopLossConfig: StopLossConfig = DEFAULT_STOP_LOSS_CONFIG\n): boolean => {\n  if (!stopLossConfig.enabled) {\n    return false;\n  }\n\n  // For long positions (buy), trigger stop loss if price drops below threshold\n  if (position.action === 'buy') {\n    const stopLossThreshold = position.entryPrice * (1 - stopLossConfig.percentage / 100);\n    return currentPrice <= stopLossThreshold;\n  }\n  \n  // For short positions (sell), trigger stop loss if price rises above threshold\n  if (position.action === 'sell') {\n    const stopLossThreshold = position.entryPrice * (1 + stopLossConfig.percentage / 100);\n    return currentPrice >= stopLossThreshold;\n  }\n\n  return false;\n};\n\n// Format stop loss message\nexport const formatStopLossMessage = (\n  position: Position, \n  currentPrice: number, \n  stopLossConfig: StopLossConfig = DEFAULT_STOP_LOSS_CONFIG\n): string => {\n  const direction = position.action === 'buy' ? 'dropped' : 'increased';\n  const threshold = position.action === 'buy' \n    ? position.entryPrice * (1 - stopLossConfig.percentage / 100)\n    : position.entryPrice * (1 + stopLossConfig.percentage / 100);\n  \n  return `Stop loss triggered for ${position.pair}: Price ${direction} to ${currentPrice.toFixed(2)} (${stopLossConfig.percentage}% from entry price of ${position.entryPrice.toFixed(2)})`;\n};\n\n// Calculate potential loss at stop loss point\nexport const calculatePotentialLoss = (\n  position: Position,\n  stopLossConfig: StopLossConfig = DEFAULT_STOP_LOSS_CONFIG\n): number => {\n  const stopLossPrice = position.action === 'buy'\n    ? position.entryPrice * (1 - stopLossConfig.percentage / 100)\n    : position.entryPrice * (1 + stopLossConfig.percentage / 100);\n  \n  const loss = position.action === 'buy'\n    ? (stopLossPrice - position.entryPrice) * position.amount\n    : (position.entryPrice - stopLossPrice) * position.amount;\n  \n  return Math.abs(loss);\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAkBO,MAAM,2BAA2C;IACtD,SAAS;IACT,YAAY;AACd;AAGO,MAAM,gBAAgB,CAC3B,UACA,cACA,iBAAiC,wBAAwB;IAEzD,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,OAAO;IACT;IAEA,6EAA6E;IAC7E,IAAI,SAAS,MAAM,KAAK,OAAO;QAC7B,MAAM,oBAAoB,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG;QACpF,OAAO,gBAAgB;IACzB;IAEA,+EAA+E;IAC/E,IAAI,SAAS,MAAM,KAAK,QAAQ;QAC9B,MAAM,oBAAoB,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG;QACpF,OAAO,gBAAgB;IACzB;IAEA,OAAO;AACT;AAGO,MAAM,wBAAwB,CACnC,UACA,cACA,iBAAiC,wBAAwB;IAEzD,MAAM,YAAY,SAAS,MAAM,KAAK,QAAQ,YAAY;IAC1D,MAAM,YAAY,SAAS,MAAM,KAAK,QAClC,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG,IAC1D,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG;IAE9D,OAAO,CAAC,wBAAwB,EAAE,SAAS,IAAI,CAAC,QAAQ,EAAE,UAAU,IAAI,EAAE,aAAa,OAAO,CAAC,GAAG,EAAE,EAAE,eAAe,UAAU,CAAC,sBAAsB,EAAE,SAAS,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC3L;AAGO,MAAM,yBAAyB,CACpC,UACA,iBAAiC,wBAAwB;IAEzD,MAAM,gBAAgB,SAAS,MAAM,KAAK,QACtC,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG,IAC1D,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG;IAE9D,MAAM,OAAO,SAAS,MAAM,KAAK,QAC7B,CAAC,gBAAgB,SAAS,UAAU,IAAI,SAAS,MAAM,GACvD,CAAC,SAAS,UAAU,GAAG,aAAa,IAAI,SAAS,MAAM;IAE3D,OAAO,KAAK,GAAG,CAAC;AAClB","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/components/BotControl.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { DEFAULT_STOP_LOSS_CONFIG, Position, checkStopLoss, formatStopLossMessage } from '@/lib/safetyFeatures';\n\n// Define StrategyParams interface\nexport interface StrategyParams {\n  type: string;\n  indicators: Array<{\n    type: string;\n    parameters: any;\n  }>;\n  amount: number;\n  pair: string;\n  action: 'buy' | 'sell';\n}\n\n// Simplified BotControl component that works with static exports\nconst BotControl = ({ strategyParams }) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [isTestMode, setIsTestMode] = useState(true);\n  const [lastTrade, setLastTrade] = useState(null);\n  const [tradeHistory, setTradeHistory] = useState([]);\n  const [activePositions, setActivePositions] = useState<Position[]>([]);\n  const [stopLossConfig, setStopLossConfig] = useState(DEFAULT_STOP_LOSS_CONFIG);\n  const [stopLossTriggered, setStopLossTriggered] = useState(false);\n  const [stopLossMessage, setStopLossMessage] = useState('');\n  \n  // Function to start trading bot\n  const startBot = async () => {\n    if (!window.phantom?.solana?.isPhantom) {\n      alert(\"Please connect your Phantom wallet first\");\n      return;\n    }\n    \n    setIsRunning(true);\n    setStopLossTriggered(false);\n    setStopLossMessage('');\n    \n    // In a real implementation, this would connect to Jupiter API and execute trades\n    // For now, we'll simulate trading activity\n    if (isTestMode) {\n      simulateTrading();\n    } else {\n      // This would be real trading in production\n      alert(\"Real trading mode activated. In production, this would execute actual trades.\");\n      simulateTrading(); // Still simulate for demo purposes\n    }\n  };\n  \n  // Function to stop trading bot\n  const stopBot = () => {\n    setIsRunning(false);\n  };\n  \n  // Function to toggle test mode\n  const toggleTestMode = () => {\n    setIsTestMode(!isTestMode);\n  };\n  \n  // Function to handle stop loss\n  const handleStopLoss = (position: Position, currentPrice: number) => {\n    if (checkStopLoss(position, currentPrice, stopLossConfig)) {\n      // Stop loss triggered\n      const message = formatStopLossMessage(position, currentPrice, stopLossConfig);\n      console.log(message);\n      \n      // Create exit trade\n      const exitAction = position.action === 'buy' ? 'sell' : 'buy';\n      const now = new Date();\n      const exitTrade = {\n        timestamp: now.toISOString(),\n        pair: position.pair,\n        action: exitAction,\n        amount: position.amount,\n        price: currentPrice.toFixed(2),\n        strategy: 'Stop Loss',\n        success: true,\n      };\n      \n      // Update trade history\n      setLastTrade(exitTrade);\n      setTradeHistory(prev => [exitTrade, ...prev].slice(0, 10));\n      \n      // Remove position from active positions\n      setActivePositions(prev => prev.filter(p => p.id !== position.id));\n      \n      // Set stop loss message\n      setStopLossTriggered(true);\n      setStopLossMessage(message);\n      \n      // In a real implementation, this would execute the actual exit trade\n      return true;\n    }\n    return false;\n  };\n  \n  // Simulate trading activity for demonstration\n  const simulateTrading = () => {\n    const interval = setInterval(() => {\n      if (!isRunning) {\n        clearInterval(interval);\n        return;\n      }\n      \n      const now = new Date();\n      const action = Math.random() > 0.5 ? 'buy' : 'sell';\n      const price = parseFloat((Math.random() * 100 + 50).toFixed(2));\n      const amount = parseFloat((Math.random() * strategyParams.amount).toFixed(3));\n      \n      // Create trade\n      const trade = {\n        timestamp: now.toISOString(),\n        pair: strategyParams.pair,\n        action,\n        amount,\n        price,\n        strategy: strategyParams.type,\n        success: Math.random() > 0.1, // 90% success rate\n      };\n      \n      // Update trade history\n      setLastTrade(trade);\n      setTradeHistory(prev => [trade, ...prev].slice(0, 10));\n      \n      // If trade is successful, add to active positions\n      if (trade.success) {\n        const newPosition: Position = {\n          id: `pos-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n          pair: trade.pair,\n          entryPrice: price,\n          amount,\n          timestamp: trade.timestamp,\n          action: action as 'buy' | 'sell',\n        };\n        \n        setActivePositions(prev => [...prev, newPosition]);\n      }\n      \n      // Check stop loss for all active positions\n      setActivePositions(prev => {\n        const updatedPositions = [...prev];\n        \n        // Simulate price movement for each position\n        for (const position of [...updatedPositions]) {\n          // Simulate current price with some random movement\n          const priceMovement = (Math.random() * 6) - 3; // -3% to +3%\n          const currentPrice = position.entryPrice * (1 + priceMovement / 100);\n          \n          // Check if stop loss should be triggered\n          handleStopLoss(position, currentPrice);\n        }\n        \n        return updatedPositions.filter(p => \n          !handleStopLoss(p, p.entryPrice * (1 - (Math.random() * 5) / 100))\n        );\n      });\n      \n    }, 10000); // Simulate a trade every 10 seconds\n    \n    return () => clearInterval(interval);\n  };\n  \n  // In a real implementation, this would execute an actual trade via Jupiter\n  const executeTrade = async (params) => {\n    try {\n      // This would be replaced with actual Jupiter API calls\n      console.log(\"Executing trade with params:\", params);\n      \n      // Simulate API response\n      return {\n        success: true,\n        signature: \"simulated_transaction_signature\",\n        inputAmount: params.amount,\n        expectedOutputAmount: (params.amount * 1.01).toString(),\n      };\n    } catch (error) {\n      console.error(\"Trade execution error:\", error);\n      return {\n        success: false,\n        error: error.message || \"Unknown error\",\n      };\n    }\n  };\n  \n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg\">\n      <h2 className=\"text-xl font-bold mb-4\">Bot Control</h2>\n      \n      <div className=\"flex items-center mb-4\">\n        <span className=\"mr-2\">Test Mode:</span>\n        <button \n          onClick={toggleTestMode}\n          className={`px-3 py-1 rounded-md ${isTestMode ? 'bg-green-600' : 'bg-gray-600'}`}\n        >\n          {isTestMode ? 'Enabled' : 'Disabled'}\n        </button>\n        {!isTestMode && (\n          <span className=\"ml-2 text-red-500 text-sm\">Warning: Real trading enabled!</span>\n        )}\n      </div>\n      \n      <div className=\"flex items-center mb-4\">\n        <span className=\"mr-2\">Stop Loss (2.5%):</span>\n        <button \n          onClick={() => setStopLossConfig({...stopLossConfig, enabled: !stopLossConfig.enabled})}\n          className={`px-3 py-1 rounded-md ${stopLossConfig.enabled ? 'bg-green-600' : 'bg-gray-600'}`}\n        >\n          {stopLossConfig.enabled ? 'Enabled' : 'Disabled'}\n        </button>\n      </div>\n      \n      <div className=\"flex space-x-4 mb-6\">\n        {!isRunning ? (\n          <button \n            onClick={startBot}\n            className=\"bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            Start Trading\n          </button>\n        ) : (\n          <button \n            onClick={stopBot}\n            className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            Stop Trading\n          </button>\n        )}\n      </div>\n      \n      {isRunning && (\n        <div className=\"bg-gray-900 p-4 rounded-md\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n            <span>Bot is running with {strategyParams.type} strategy</span>\n          </div>\n        </div>\n      )}\n      \n      {stopLossTriggered && (\n        <div className=\"mt-4 bg-red-900/50 p-4 rounded-md\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-2\"></div>\n            <span className=\"text-red-300\">{stopLossMessage}</span>\n          </div>\n        </div>\n      )}\n      \n      {activePositions.length > 0 && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2\">Active Positions</h3>\n          <div className=\"bg-gray-900 p-3 rounded-md\">\n            {activePositions.map((position) => (\n              <div key={position.id} className=\"border-b border-gray-700 py-2 last:border-0\">\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Pair: {position.pair}</div>\n                  <div>Action: <span className={position.action === 'buy' ? 'text-green-500' : 'text-red-500'}>{position.action}</span></div>\n                  <div>Amount: {position.amount}</div>\n                  <div>Entry Price: ${position.entryPrice.toFixed(2)}</div>\n                  <div>Stop Loss: ${(position.action === 'buy' \n                    ? position.entryPrice * (1 - stopLossConfig.percentage / 100) \n                    : position.entryPrice * (1 + stopLossConfig.percentage / 100)).toFixed(2)}</div>\n                  <div>Time: {new Date(position.timestamp).toLocaleTimeString()}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {lastTrade && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2\">Last Trade</h3>\n          <div className=\"bg-gray-900 p-3 rounded-md\">\n            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n              <div>Pair: {lastTrade.pair}</div>\n              <div>Action: <span className={lastTrade.action === 'buy' ? 'text-green-500' : 'text-red-500'}>{lastTrade.action}</span></div>\n              <div>Amount: {lastTrade.amount}</div>\n              <div>Price: ${lastTrade.price}</div>\n              <div>Status: {lastTrade.success ? 'Success' : 'Failed'}</div>\n              <div>Time: {new Date(lastTrade.timestamp).toLocaleTimeString()}</div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {tradeHistory.length > 0 && (\n        <div className=\"mt-4\">\n          <h3 className=\"font-bold mb-2\">Recent Trades</h3>\n          <div className=\"max-h-40 overflow-y-auto\">\n            {tradeHistory.map((trade, index) => (\n              <div key={index} className=\"bg-gray-900 p-2 rounded-md mb-2 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span>{trade.pair} - {trade.action.toUpperCase()}</span>\n                  <span>{new Date(trade.timestamp).toLocaleTimeString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>{trade.amount} @ ${trade.price}</span>\n                  <span className={trade.success ? 'text-green-500' : 'text-red-500'}>\n                    {trade.success ? 'Success' : 'Failed'}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BotControl;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAiBA,iEAAiE;AACjE,MAAM,aAAa,CAAC,EAAE,cAAc,EAAE;IACpC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,EAAE;IACnD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACrE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,4HAAA,CAAA,2BAAwB;IAC7E,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,gCAAgC;IAChC,MAAM,WAAW;QACf,IAAI,CAAC,OAAO,OAAO,EAAE,QAAQ,WAAW;YACtC,MAAM;YACN;QACF;QAEA,aAAa;QACb,qBAAqB;QACrB,mBAAmB;QAEnB,iFAAiF;QACjF,2CAA2C;QAC3C,IAAI,YAAY;YACd;QACF,OAAO;YACL,2CAA2C;YAC3C,MAAM;YACN,mBAAmB,mCAAmC;QACxD;IACF;IAEA,+BAA+B;IAC/B,MAAM,UAAU;QACd,aAAa;IACf;IAEA,+BAA+B;IAC/B,MAAM,iBAAiB;QACrB,cAAc,CAAC;IACjB;IAEA,+BAA+B;IAC/B,MAAM,iBAAiB,CAAC,UAAoB;QAC1C,IAAI,CAAA,GAAA,4HAAA,CAAA,gBAAa,AAAD,EAAE,UAAU,cAAc,iBAAiB;YACzD,sBAAsB;YACtB,MAAM,UAAU,CAAA,GAAA,4HAAA,CAAA,wBAAqB,AAAD,EAAE,UAAU,cAAc;YAC9D,QAAQ,GAAG,CAAC;YAEZ,oBAAoB;YACpB,MAAM,aAAa,SAAS,MAAM,KAAK,QAAQ,SAAS;YACxD,MAAM,MAAM,IAAI;YAChB,MAAM,YAAY;gBAChB,WAAW,IAAI,WAAW;gBAC1B,MAAM,SAAS,IAAI;gBACnB,QAAQ;gBACR,QAAQ,SAAS,MAAM;gBACvB,OAAO,aAAa,OAAO,CAAC;gBAC5B,UAAU;gBACV,SAAS;YACX;YAEA,uBAAuB;YACvB,aAAa;YACb,gBAAgB,CAAA,OAAQ;oBAAC;uBAAc;iBAAK,CAAC,KAAK,CAAC,GAAG;YAEtD,wCAAwC;YACxC,mBAAmB,CAAA,OAAQ,KAAK,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,SAAS,EAAE;YAEhE,wBAAwB;YACxB,qBAAqB;YACrB,mBAAmB;YAEnB,qEAAqE;YACrE,OAAO;QACT;QACA,OAAO;IACT;IAEA,8CAA8C;IAC9C,MAAM,kBAAkB;QACtB,MAAM,WAAW,YAAY;YAC3B,IAAI,CAAC,WAAW;gBACd,cAAc;gBACd;YACF;YAEA,MAAM,MAAM,IAAI;YAChB,MAAM,SAAS,KAAK,MAAM,KAAK,MAAM,QAAQ;YAC7C,MAAM,QAAQ,WAAW,CAAC,KAAK,MAAM,KAAK,MAAM,EAAE,EAAE,OAAO,CAAC;YAC5D,MAAM,SAAS,WAAW,CAAC,KAAK,MAAM,KAAK,eAAe,MAAM,EAAE,OAAO,CAAC;YAE1E,eAAe;YACf,MAAM,QAAQ;gBACZ,WAAW,IAAI,WAAW;gBAC1B,MAAM,eAAe,IAAI;gBACzB;gBACA;gBACA;gBACA,UAAU,eAAe,IAAI;gBAC7B,SAAS,KAAK,MAAM,KAAK;YAC3B;YAEA,uBAAuB;YACvB,aAAa;YACb,gBAAgB,CAAA,OAAQ;oBAAC;uBAAU;iBAAK,CAAC,KAAK,CAAC,GAAG;YAElD,kDAAkD;YAClD,IAAI,MAAM,OAAO,EAAE;gBACjB,MAAM,cAAwB;oBAC5B,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI;oBACrE,MAAM,MAAM,IAAI;oBAChB,YAAY;oBACZ;oBACA,WAAW,MAAM,SAAS;oBAC1B,QAAQ;gBACV;gBAEA,mBAAmB,CAAA,OAAQ;2BAAI;wBAAM;qBAAY;YACnD;YAEA,2CAA2C;YAC3C,mBAAmB,CAAA;gBACjB,MAAM,mBAAmB;uBAAI;iBAAK;gBAElC,4CAA4C;gBAC5C,KAAK,MAAM,YAAY;uBAAI;iBAAiB,CAAE;oBAC5C,mDAAmD;oBACnD,MAAM,gBAAgB,AAAC,KAAK,MAAM,KAAK,IAAK,GAAG,aAAa;oBAC5D,MAAM,eAAe,SAAS,UAAU,GAAG,CAAC,IAAI,gBAAgB,GAAG;oBAEnE,yCAAyC;oBACzC,eAAe,UAAU;gBAC3B;gBAEA,OAAO,iBAAiB,MAAM,CAAC,CAAA,IAC7B,CAAC,eAAe,GAAG,EAAE,UAAU,GAAG,CAAC,IAAI,AAAC,KAAK,MAAM,KAAK,IAAK,GAAG;YAEpE;QAEF,GAAG,QAAQ,oCAAoC;QAE/C,OAAO,IAAM,cAAc;IAC7B;IAEA,2EAA2E;IAC3E,MAAM,eAAe,OAAO;QAC1B,IAAI;YACF,uDAAuD;YACvD,QAAQ,GAAG,CAAC,gCAAgC;YAE5C,wBAAwB;YACxB,OAAO;gBACL,SAAS;gBACT,WAAW;gBACX,aAAa,OAAO,MAAM;gBAC1B,sBAAsB,CAAC,OAAO,MAAM,GAAG,IAAI,EAAE,QAAQ;YACvD;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO;gBACL,SAAS;gBACT,OAAO,MAAM,OAAO,IAAI;YAC1B;QACF;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAAyB;;;;;;0BAEvC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAK,WAAU;kCAAO;;;;;;kCACvB,8OAAC;wBACC,SAAS;wBACT,WAAW,CAAC,qBAAqB,EAAE,aAAa,iBAAiB,eAAe;kCAE/E,aAAa,YAAY;;;;;;oBAE3B,CAAC,4BACA,8OAAC;wBAAK,WAAU;kCAA4B;;;;;;;;;;;;0BAIhD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAK,WAAU;kCAAO;;;;;;kCACvB,8OAAC;wBACC,SAAS,IAAM,kBAAkB;gCAAC,GAAG,cAAc;gCAAE,SAAS,CAAC,eAAe,OAAO;4BAAA;wBACrF,WAAW,CAAC,qBAAqB,EAAE,eAAe,OAAO,GAAG,iBAAiB,eAAe;kCAE3F,eAAe,OAAO,GAAG,YAAY;;;;;;;;;;;;0BAI1C,8OAAC;gBAAI,WAAU;0BACZ,CAAC,0BACA,8OAAC;oBACC,SAAS;oBACT,WAAU;8BACX;;;;;yCAID,8OAAC;oBACC,SAAS;oBACT,WAAU;8BACX;;;;;;;;;;;YAMJ,2BACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;;gCAAK;gCAAqB,eAAe,IAAI;gCAAC;;;;;;;;;;;;;;;;;;YAKpD,mCACC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;;;;;sCACf,8OAAC;4BAAK,WAAU;sCAAgB;;;;;;;;;;;;;;;;;YAKrC,gBAAgB,MAAM,GAAG,mBACxB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAiB;;;;;;kCAC/B,8OAAC;wBAAI,WAAU;kCACZ,gBAAgB,GAAG,CAAC,CAAC,yBACpB,8OAAC;gCAAsB,WAAU;0CAC/B,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;;gDAAI;gDAAO,SAAS,IAAI;;;;;;;sDACzB,8OAAC;;gDAAI;8DAAQ,8OAAC;oDAAK,WAAW,SAAS,MAAM,KAAK,QAAQ,mBAAmB;8DAAiB,SAAS,MAAM;;;;;;;;;;;;sDAC7G,8OAAC;;gDAAI;gDAAS,SAAS,MAAM;;;;;;;sDAC7B,8OAAC;;gDAAI;gDAAe,SAAS,UAAU,CAAC,OAAO,CAAC;;;;;;;sDAChD,8OAAC;;gDAAI;gDAAa,CAAC,SAAS,MAAM,KAAK,QACnC,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG,IAC1D,SAAS,UAAU,GAAG,CAAC,IAAI,eAAe,UAAU,GAAG,GAAG,CAAC,EAAE,OAAO,CAAC;;;;;;;sDACzE,8OAAC;;gDAAI;gDAAO,IAAI,KAAK,SAAS,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;+BATrD,SAAS,EAAE;;;;;;;;;;;;;;;;YAiB5B,2BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAiB;;;;;;kCAC/B,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;;wCAAI;wCAAO,UAAU,IAAI;;;;;;;8CAC1B,8OAAC;;wCAAI;sDAAQ,8OAAC;4CAAK,WAAW,UAAU,MAAM,KAAK,QAAQ,mBAAmB;sDAAiB,UAAU,MAAM;;;;;;;;;;;;8CAC/G,8OAAC;;wCAAI;wCAAS,UAAU,MAAM;;;;;;;8CAC9B,8OAAC;;wCAAI;wCAAS,UAAU,KAAK;;;;;;;8CAC7B,8OAAC;;wCAAI;wCAAS,UAAU,OAAO,GAAG,YAAY;;;;;;;8CAC9C,8OAAC;;wCAAI;wCAAO,IAAI,KAAK,UAAU,SAAS,EAAE,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;YAMnE,aAAa,MAAM,GAAG,mBACrB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAiB;;;;;;kCAC/B,8OAAC;wBAAI,WAAU;kCACZ,aAAa,GAAG,CAAC,CAAC,OAAO,sBACxB,8OAAC;gCAAgB,WAAU;;kDACzB,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;;oDAAM,MAAM,IAAI;oDAAC;oDAAI,MAAM,MAAM,CAAC,WAAW;;;;;;;0DAC9C,8OAAC;0DAAM,IAAI,KAAK,MAAM,SAAS,EAAE,kBAAkB;;;;;;;;;;;;kDAErD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;;oDAAM,MAAM,MAAM;oDAAC;oDAAK,MAAM,KAAK;;;;;;;0DACpC,8OAAC;gDAAK,WAAW,MAAM,OAAO,GAAG,mBAAmB;0DACjD,MAAM,OAAO,GAAG,YAAY;;;;;;;;;;;;;+BARzB;;;;;;;;;;;;;;;;;;;;;;AAkBxB;uCAEe","debugId":null}}]
}