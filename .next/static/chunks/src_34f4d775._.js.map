{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/components/StrategyConfig.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\n\ntype IndicatorType = 'Moving Average' | 'RSI' | 'MACD' | 'Bollinger Bands';\ntype StrategyType = 'Mean Reversion' | 'Breakout Momentum' | 'Range Scalping' | 'Multi-indicator';\ntype ActionType = 'Buy' | 'Sell';\n\ninterface Indicator {\n  type: IndicatorType;\n  parameters: Record<string, number>;\n}\n\ninterface StrategyConfigProps {\n  onStrategyUpdate?: (params: any) => void;\n}\n\nexport default function StrategyConfig({ onStrategyUpdate }: StrategyConfigProps) {\n  const [amount, setAmount] = useState<number>(0.5);\n  const [strategyType, setStrategyType] = useState<StrategyType>('Multi-indicator');\n  const [indicators, setIndicators] = useState<Indicator[]>([\n    { type: 'Moving Average', parameters: { period: 14 } },\n    { type: 'RSI', parameters: { period: 30 } },\n    { type: 'MACD', parameters: { fast: 12, slow: 26 } }\n  ]);\n  const [action, setAction] = useState<ActionType>('Buy');\n  const [pair, setPair] = useState<string>('SOL/USDC');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const handleStartBot = async () => {\n    setIsLoading(true);\n    // Here we would connect to the backend to start the bot\n    console.log('Starting bot with config:', {\n      amount,\n      strategyType,\n      indicators,\n      action,\n      pair\n    });\n    \n    // Notify parent component of strategy update\n    if (onStrategyUpdate) {\n      onStrategyUpdate({\n        type: strategyType,\n        indicators: indicators.map(ind => ({\n          type: ind.type === 'Moving Average' ? 'SMA' : ind.type,\n          parameters: ind.parameters\n        })),\n        amount,\n        pair,\n        action: action.toLowerCase()\n      });\n    }\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  const updateIndicator = (index: number, field: string, value: any) => {\n    const newIndicators = [...indicators];\n    if (field === 'type') {\n      newIndicators[index].type = value as IndicatorType;\n      \n      // Reset parameters based on indicator type\n      switch (value) {\n        case 'Moving Average':\n          newIndicators[index].parameters = { period: 14 };\n          break;\n        case 'RSI':\n          newIndicators[index].parameters = { period: 14 };\n          break;\n        case 'MACD':\n          newIndicators[index].parameters = { fast: 12, slow: 26 };\n          break;\n        case 'Bollinger Bands':\n          newIndicators[index].parameters = { period: 20, deviation: 2 };\n          break;\n      }\n    } else {\n      // It's a parameter update\n      const [paramName, paramValue] = value;\n      newIndicators[index].parameters[paramName] = paramValue;\n    }\n    \n    setIndicators(newIndicators);\n  };\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\n      <h2 className=\"text-xl font-bold mb-4 text-white\">Strategy Configuration</h2>\n      \n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Amount</label>\n        <input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(parseFloat(e.target.value))}\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          step=\"0.1\"\n          min=\"0.1\"\n        />\n      </div>\n      \n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Strategy Type</label>\n        <select\n          value={strategyType}\n          onChange={(e) => setStrategyType(e.target.value as StrategyType)}\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"Mean Reversion\">Mean Reversion</option>\n          <option value=\"Breakout Momentum\">Breakout Momentum</option>\n          <option value=\"Range Scalping\">Range Scalping</option>\n          <option value=\"Multi-indicator\">Multi-indicator</option>\n        </select>\n      </div>\n      \n      {indicators.map((indicator, index) => (\n        <div key={index} className=\"mb-4 p-4 bg-gray-700 rounded-md\">\n          <div className=\"mb-2\">\n            <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n              Indicator {index + 1}\n            </label>\n            <select\n              value={indicator.type}\n              onChange={(e) => updateIndicator(index, 'type', e.target.value)}\n              className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"Moving Average\">Moving Average</option>\n              <option value=\"RSI\">RSI</option>\n              <option value=\"MACD\">MACD</option>\n              <option value=\"Bollinger Bands\">Bollinger Bands</option>\n            </select>\n          </div>\n          \n          {/* Render parameters based on indicator type */}\n          {indicator.type === 'Moving Average' && (\n            <div className=\"mb-2\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-1\">Period</label>\n              <input\n                type=\"number\"\n                value={indicator.parameters.period}\n                onChange={(e) => updateIndicator(index, 'parameters', ['period', parseInt(e.target.value)])}\n                className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"1\"\n              />\n            </div>\n          )}\n          \n          {indicator.type === 'RSI' && (\n            <div className=\"mb-2\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-1\">Period</label>\n              <input\n                type=\"number\"\n                value={indicator.parameters.period}\n                onChange={(e) => updateIndicator(index, 'parameters', ['period', parseInt(e.target.value)])}\n                className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                min=\"1\"\n              />\n            </div>\n          )}\n          \n          {indicator.type === 'MACD' && (\n            <>\n              <div className=\"mb-2\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">Fast Period</label>\n                <input\n                  type=\"number\"\n                  value={indicator.parameters.fast}\n                  onChange={(e) => updateIndicator(index, 'parameters', ['fast', parseInt(e.target.value)])}\n                  className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  min=\"1\"\n                />\n              </div>\n              <div className=\"mb-2\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">Slow Period</label>\n                <input\n                  type=\"number\"\n                  value={indicator.parameters.slow}\n                  onChange={(e) => updateIndicator(index, 'parameters', ['slow', parseInt(e.target.value)])}\n                  className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  min=\"1\"\n                />\n              </div>\n            </>\n          )}\n          \n          {indicator.type === 'Bollinger Bands' && (\n            <>\n              <div className=\"mb-2\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">Period</label>\n                <input\n                  type=\"number\"\n                  value={indicator.parameters.period}\n                  onChange={(e) => updateIndicator(index, 'parameters', ['period', parseInt(e.target.value)])}\n                  className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  min=\"1\"\n                />\n              </div>\n              <div className=\"mb-2\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">Standard Deviation</label>\n                <input\n                  type=\"number\"\n                  value={indicator.parameters.deviation}\n                  onChange={(e) => updateIndicator(index, 'parameters', ['deviation', parseFloat(e.target.value)])}\n                  className=\"w-full bg-gray-600 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  min=\"0.1\"\n                  step=\"0.1\"\n                />\n              </div>\n            </>\n          )}\n        </div>\n      ))}\n      \n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Action</label>\n        <select\n          value={action}\n          onChange={(e) => setAction(e.target.value as ActionType)}\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"Buy\">Buy</option>\n          <option value=\"Sell\">Sell</option>\n        </select>\n      </div>\n      \n      <div className=\"mb-6\">\n        <label className=\"block text-sm font-medium text-gray-300 mb-1\">Pair</label>\n        <select\n          value={pair}\n          onChange={(e) => setPair(e.target.value)}\n          className=\"w-full bg-gray-700 text-white px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"SOL/USDC\">SOL/USDC</option>\n          <option value=\"SOL/USDT\">SOL/USDT</option>\n          <option value=\"SOL/BTC\">SOL/BTC</option>\n        </select>\n      </div>\n      \n      <button\n        onClick={handleStartBot}\n        disabled={isLoading}\n        className={`w-full py-3 px-4 rounded-md font-medium transition-colors ${\n          isLoading \n            ? 'bg-gray-600 cursor-not-allowed' \n            : 'bg-green-600 hover:bg-green-700 text-white'\n        }`}\n      >\n        {isLoading ? 'Starting...' : 'Apply Settings'}\n      </button>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 603, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/components/TradingChart.tsx"],"sourcesContent":["'use client';\n\nexport default function TradingChart({ symbol = 'SOLUSD' }: { symbol?: string }) {\n  return (\n    <div className=\"h-[500px] w-full bg-gray-800 rounded-lg overflow-hidden flex items-center justify-center\">\n      <div className=\"text-center p-6\">\n        <h3 className=\"text-xl font-bold text-white mb-4\">Trading Chart</h3>\n        <p className=\"text-gray-400 mb-6\">\n          This is a demo version with simulated chart functionality.\n        </p>\n        <div className=\"bg-gray-700 p-4 rounded-lg\">\n          <div className=\"text-sm text-gray-400\">Symbol</div>\n          <div className=\"text-xl font-bold text-white\">{symbol}</div>\n        </div>\n        \n        {/* Simulated chart display */}\n        <div className=\"mt-8 h-64 bg-gray-700 rounded-lg p-4 flex flex-col\">\n          <div className=\"flex justify-between mb-4\">\n            <span className=\"text-green-500\">$153.80</span>\n            <span className=\"text-gray-400\">24h: +2.4%</span>\n          </div>\n          \n          {/* Simple chart visualization */}\n          <div className=\"flex-1 flex items-end\">\n            <div className=\"w-1/12 h-[20%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[30%] bg-red-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[25%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[40%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[35%] bg-red-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[45%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[60%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[50%] bg-red-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[70%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[90%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[80%] bg-green-500 mx-0.5\"></div>\n            <div className=\"w-1/12 h-[100%] bg-green-500 mx-0.5\"></div>\n          </div>\n          \n          <div className=\"flex justify-between mt-4\">\n            <span className=\"text-gray-400\">09:00</span>\n            <span className=\"text-gray-400\">16:00</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEe,SAAS,aAAa,EAAE,SAAS,QAAQ,EAAuB;IAC7E,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAAoC;;;;;;8BAClD,6LAAC;oBAAE,WAAU;8BAAqB;;;;;;8BAGlC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCAAwB;;;;;;sCACvC,6LAAC;4BAAI,WAAU;sCAAgC;;;;;;;;;;;;8BAIjD,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAAiB;;;;;;8CACjC,6LAAC;oCAAK,WAAU;8CAAgB;;;;;;;;;;;;sCAIlC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;;;;;;;sCAGjB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAAgB;;;;;;8CAChC,6LAAC;oCAAK,WAAU;8CAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAM5C;KA5CwB","debugId":null}},
    {"offset": {"line": 832, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/components/PerformanceDashboard.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\n// Mock data for demonstration\nconst mockPnlData = [\n  { time: '09:00', pnl: 0 },\n  { time: '10:00', pnl: 0.12 },\n  { time: '11:00', pnl: -0.05 },\n  { time: '12:00', pnl: 0.23 },\n  { time: '13:00', pnl: 0.45 },\n  { time: '14:00', pnl: 0.32 },\n  { time: '15:00', pnl: 0.67 },\n  { time: '16:00', pnl: 0.89 },\n];\n\nconst mockTradeData = [\n  { id: 1, pair: 'SOL/USDC', side: 'buy', amount: 0.5, price: 152.34, timestamp: '2025-04-04 10:15', status: 'completed', pnl: 0.12 },\n  { id: 2, pair: 'SOL/USDC', side: 'sell', amount: 0.3, price: 153.21, timestamp: '2025-04-04 11:30', status: 'completed', pnl: 0.08 },\n  { id: 3, pair: 'SOL/USDC', side: 'buy', amount: 0.7, price: 151.89, timestamp: '2025-04-04 13:45', status: 'completed', pnl: 0.15 },\n];\n\ninterface PerformanceDashboardProps {\n  allocatedCapital?: number;\n  maxDrawdown?: number;\n  profitTarget?: number;\n  slippage?: number;\n}\n\nexport default function PerformanceDashboard({\n  allocatedCapital = 100,\n  maxDrawdown = 20,\n  profitTarget = 30,\n  slippage = 0.5\n}: PerformanceDashboardProps) {\n  const [activeTab, setActiveTab] = useState<'livePnL' | 'openPositions' | 'recentTrades' | 'account'>('livePnL');\n  const [botStatus, setBotStatus] = useState<'ready' | 'running' | 'stopped'>('ready');\n\n  const totalPnl = mockPnlData.length > 0 ? mockPnlData[mockPnlData.length - 1].pnl : 0;\n\n  return (\n    <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg\">\n      <div className=\"flex mb-4 border-b border-gray-700\">\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'livePnL' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('livePnL')}\n        >\n          Live PnL\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'openPositions' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('openPositions')}\n        >\n          Open Positions\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'recentTrades' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('recentTrades')}\n        >\n          Recent Trades\n        </button>\n        <button\n          className={`px-4 py-2 font-medium ${activeTab === 'account' ? 'text-blue-500 border-b-2 border-blue-500' : 'text-gray-400 hover:text-gray-300'}`}\n          onClick={() => setActiveTab('account')}\n        >\n          Account\n        </button>\n      </div>\n\n      <div className=\"mt-4\">\n        {activeTab === 'livePnL' && (\n          <div>\n            <div className=\"mb-4 flex items-center\">\n              <h3 className=\"text-xl font-bold text-white\">Live PnL</h3>\n              <span className={`ml-4 text-2xl font-bold ${totalPnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                {totalPnl >= 0 ? '+' : ''}{totalPnl.toFixed(2)} SOL\n              </span>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={mockPnlData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                  <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" />\n                  <YAxis stroke=\"#9CA3AF\" />\n                  <Tooltip \n                    contentStyle={{ backgroundColor: '#1F2937', borderColor: '#374151' }}\n                    labelStyle={{ color: '#F9FAFB' }}\n                  />\n                  <Legend />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"pnl\" \n                    stroke=\"#10B981\" \n                    activeDot={{ r: 8 }} \n                    name=\"PnL (SOL)\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'openPositions' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Open Positions</h3>\n            {mockTradeData.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-700\">\n                  <thead className=\"bg-gray-700\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Pair</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Side</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Amount</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Entry Price</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Current PnL</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-gray-800 divide-y divide-gray-700\">\n                    {mockTradeData.map((trade) => (\n                      <tr key={trade.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.pair}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${trade.side === 'buy' ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.side.toUpperCase()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.amount}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">${trade.price.toFixed(2)}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${trade.pnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.pnl >= 0 ? '+' : ''}{trade.pnl.toFixed(2)} SOL\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-400\">No open positions</div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'recentTrades' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Recent Trades</h3>\n            {mockTradeData.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-700\">\n                  <thead className=\"bg-gray-700\">\n                    <tr>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Time</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Pair</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Side</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Amount</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">Price</th>\n                      <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider\">PnL</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-gray-800 divide-y divide-gray-700\">\n                    {mockTradeData.map((trade) => (\n                      <tr key={trade.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.timestamp}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.pair}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${trade.side === 'buy' ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.side.toUpperCase()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">{trade.amount}</td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-300\">${trade.price.toFixed(2)}</td>\n                        <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${trade.pnl >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                          {trade.pnl >= 0 ? '+' : ''}{trade.pnl.toFixed(2)} SOL\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-400\">No recent trades</div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'account' && (\n          <div>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Account</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-400\">Allocated Capital</div>\n                <div className=\"text-xl font-bold text-white\">{allocatedCapital} SOL</div>\n              </div>\n              <div className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-400\">Max Drawdown</div>\n                <div className=\"text-xl font-bold text-white\">{maxDrawdown}%</div>\n              </div>\n              <div className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-400\">Profit Target</div>\n                <div className=\"text-xl font-bold text-white\">{profitTarget}%</div>\n              </div>\n              <div className=\"bg-gray-700 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-400\">Slippage</div>\n                <div className=\"text-xl font-bold text-white\">{slippage}%</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"mt-6 pt-6 border-t border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className={`w-3 h-3 rounded-full mr-2 ${\n              botStatus === 'running' ? 'bg-green-500' : \n              botStatus === 'ready' ? 'bg-yellow-500' : 'bg-red-500'\n            }`}></div>\n            <span className=\"text-gray-300\">\n              Bot {botStatus === 'running' ? 'running' : botStatus === 'ready' ? 'not ready' : 'stopped'}\n            </span>\n          </div>\n          <button\n            onClick={() => setBotStatus(botStatus === 'running' ? 'stopped' : 'running')}\n            className={`px-4 py-2 rounded-md font-medium ${\n              botStatus === 'running' \n                ? 'bg-red-600 hover:bg-red-700 text-white' \n                : 'bg-green-600 hover:bg-green-700 text-white'\n            }`}\n            disabled={botStatus === 'ready'}\n          >\n            {botStatus === 'running' ? 'Stop Bot' : 'Start Bot'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;;;AAgBA,8BAA8B;AAC9B,MAAM,cAAc;IAClB;QAAE,MAAM;QAAS,KAAK;IAAE;IACxB;QAAE,MAAM;QAAS,KAAK;IAAK;IAC3B;QAAE,MAAM;QAAS,KAAK,CAAC;IAAK;IAC5B;QAAE,MAAM;QAAS,KAAK;IAAK;IAC3B;QAAE,MAAM;QAAS,KAAK;IAAK;IAC3B;QAAE,MAAM;QAAS,KAAK;IAAK;IAC3B;QAAE,MAAM;QAAS,KAAK;IAAK;IAC3B;QAAE,MAAM;QAAS,KAAK;IAAK;CAC5B;AAED,MAAM,gBAAgB;IACpB;QAAE,IAAI;QAAG,MAAM;QAAY,MAAM;QAAO,QAAQ;QAAK,OAAO;QAAQ,WAAW;QAAoB,QAAQ;QAAa,KAAK;IAAK;IAClI;QAAE,IAAI;QAAG,MAAM;QAAY,MAAM;QAAQ,QAAQ;QAAK,OAAO;QAAQ,WAAW;QAAoB,QAAQ;QAAa,KAAK;IAAK;IACnI;QAAE,IAAI;QAAG,MAAM;QAAY,MAAM;QAAO,QAAQ;QAAK,OAAO;QAAQ,WAAW;QAAoB,QAAQ;QAAa,KAAK;IAAK;CACnI;AASc,SAAS,qBAAqB,EAC3C,mBAAmB,GAAG,EACtB,cAAc,EAAE,EAChB,eAAe,EAAE,EACjB,WAAW,GAAG,EACY;;IAC1B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA4D;IACrG,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmC;IAE5E,MAAM,WAAW,YAAY,MAAM,GAAG,IAAI,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE,CAAC,GAAG,GAAG;IAEpF,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,WAAW,CAAC,sBAAsB,EAAE,cAAc,YAAY,6CAA6C,qCAAqC;wBAChJ,SAAS,IAAM,aAAa;kCAC7B;;;;;;kCAGD,6LAAC;wBACC,WAAW,CAAC,sBAAsB,EAAE,cAAc,kBAAkB,6CAA6C,qCAAqC;wBACtJ,SAAS,IAAM,aAAa;kCAC7B;;;;;;kCAGD,6LAAC;wBACC,WAAW,CAAC,sBAAsB,EAAE,cAAc,iBAAiB,6CAA6C,qCAAqC;wBACrJ,SAAS,IAAM,aAAa;kCAC7B;;;;;;kCAGD,6LAAC;wBACC,WAAW,CAAC,sBAAsB,EAAE,cAAc,YAAY,6CAA6C,qCAAqC;wBAChJ,SAAS,IAAM,aAAa;kCAC7B;;;;;;;;;;;;0BAKH,6LAAC;gBAAI,WAAU;;oBACZ,cAAc,2BACb,6LAAC;;0CACC,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAA+B;;;;;;kDAC7C,6LAAC;wCAAK,WAAW,CAAC,wBAAwB,EAAE,YAAY,IAAI,mBAAmB,gBAAgB;;4CAC5F,YAAY,IAAI,MAAM;4CAAI,SAAS,OAAO,CAAC;4CAAG;;;;;;;;;;;;;0CAGnD,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC,sKAAA,CAAA,sBAAmB;oCAAC,OAAM;oCAAO,QAAO;8CACvC,cAAA,6LAAC,wJAAA,CAAA,YAAS;wCAAC,MAAM;;0DACf,6LAAC,gKAAA,CAAA,gBAAa;gDAAC,iBAAgB;gDAAM,QAAO;;;;;;0DAC5C,6LAAC,wJAAA,CAAA,QAAK;gDAAC,SAAQ;gDAAO,QAAO;;;;;;0DAC7B,6LAAC,wJAAA,CAAA,QAAK;gDAAC,QAAO;;;;;;0DACd,6LAAC,0JAAA,CAAA,UAAO;gDACN,cAAc;oDAAE,iBAAiB;oDAAW,aAAa;gDAAU;gDACnE,YAAY;oDAAE,OAAO;gDAAU;;;;;;0DAEjC,6LAAC,yJAAA,CAAA,SAAM;;;;;0DACP,6LAAC,uJAAA,CAAA,OAAI;gDACH,MAAK;gDACL,SAAQ;gDACR,QAAO;gDACP,WAAW;oDAAE,GAAG;gDAAE;gDAClB,MAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQhB,cAAc,iCACb,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;0CAAoC;;;;;;4BACjD,cAAc,MAAM,GAAG,kBACtB,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAM,WAAU;;sDACf,6LAAC;4CAAM,WAAU;sDACf,cAAA,6LAAC;;kEACC,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;;;;;;;;;;;;sDAG/G,6LAAC;4CAAM,WAAU;sDACd,cAAc,GAAG,CAAC,CAAC,sBAClB,6LAAC;;sEACC,6LAAC;4DAAG,WAAU;sEAAqD,MAAM,IAAI;;;;;;sEAC7E,6LAAC;4DAAG,WAAW,CAAC,oCAAoC,EAAE,MAAM,IAAI,KAAK,QAAQ,mBAAmB,gBAAgB;sEAC7G,MAAM,IAAI,CAAC,WAAW;;;;;;sEAEzB,6LAAC;4DAAG,WAAU;sEAAqD,MAAM,MAAM;;;;;;sEAC/E,6LAAC;4DAAG,WAAU;;gEAAoD;gEAAE,MAAM,KAAK,CAAC,OAAO,CAAC;;;;;;;sEACxF,6LAAC;4DAAG,WAAW,CAAC,gDAAgD,EAAE,MAAM,GAAG,IAAI,IAAI,mBAAmB,gBAAgB;;gEACnH,MAAM,GAAG,IAAI,IAAI,MAAM;gEAAI,MAAM,GAAG,CAAC,OAAO,CAAC;gEAAG;;;;;;;;mDAR5C,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;qDAgBzB,6LAAC;gCAAI,WAAU;0CAAiC;;;;;;;;;;;;oBAKrD,cAAc,gCACb,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;0CAAoC;;;;;;4BACjD,cAAc,MAAM,GAAG,kBACtB,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAM,WAAU;;sDACf,6LAAC;4CAAM,WAAU;sDACf,cAAA,6LAAC;;kEACC,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAC3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;;;;;;;;;;;;sDAG/G,6LAAC;4CAAM,WAAU;sDACd,cAAc,GAAG,CAAC,CAAC,sBAClB,6LAAC;;sEACC,6LAAC;4DAAG,WAAU;sEAAqD,MAAM,SAAS;;;;;;sEAClF,6LAAC;4DAAG,WAAU;sEAAqD,MAAM,IAAI;;;;;;sEAC7E,6LAAC;4DAAG,WAAW,CAAC,oCAAoC,EAAE,MAAM,IAAI,KAAK,QAAQ,mBAAmB,gBAAgB;sEAC7G,MAAM,IAAI,CAAC,WAAW;;;;;;sEAEzB,6LAAC;4DAAG,WAAU;sEAAqD,MAAM,MAAM;;;;;;sEAC/E,6LAAC;4DAAG,WAAU;;gEAAoD;gEAAE,MAAM,KAAK,CAAC,OAAO,CAAC;;;;;;;sEACxF,6LAAC;4DAAG,WAAW,CAAC,gDAAgD,EAAE,MAAM,GAAG,IAAI,IAAI,mBAAmB,gBAAgB;;gEACnH,MAAM,GAAG,IAAI,IAAI,MAAM;gEAAI,MAAM,GAAG,CAAC,OAAO,CAAC;gEAAG;;;;;;;;mDAT5C,MAAM,EAAE;;;;;;;;;;;;;;;;;;;;qDAiBzB,6LAAC;gCAAI,WAAU;0CAAiC;;;;;;;;;;;;oBAKrD,cAAc,2BACb,6LAAC;;0CACC,6LAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAClD,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,6LAAC;gDAAI,WAAU;;oDAAgC;oDAAiB;;;;;;;;;;;;;kDAElE,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,6LAAC;gDAAI,WAAU;;oDAAgC;oDAAY;;;;;;;;;;;;;kDAE7D,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,6LAAC;gDAAI,WAAU;;oDAAgC;oDAAa;;;;;;;;;;;;;kDAE9D,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,6LAAC;gDAAI,WAAU;;oDAAgC;oDAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOlE,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAW,CAAC,0BAA0B,EACzC,cAAc,YAAY,iBAC1B,cAAc,UAAU,kBAAkB,cAC1C;;;;;;8CACF,6LAAC;oCAAK,WAAU;;wCAAgB;wCACzB,cAAc,YAAY,YAAY,cAAc,UAAU,cAAc;;;;;;;;;;;;;sCAGrF,6LAAC;4BACC,SAAS,IAAM,aAAa,cAAc,YAAY,YAAY;4BAClE,WAAW,CAAC,iCAAiC,EAC3C,cAAc,YACV,2CACA,8CACJ;4BACF,UAAU,cAAc;sCAEvB,cAAc,YAAY,aAAa;;;;;;;;;;;;;;;;;;;;;;;AAMpD;GA1MwB;KAAA","debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file://C%3A/solbotx-final/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport dynamic from 'next/dynamic';\nimport StrategyConfig from '@/components/StrategyConfig';\nimport TradingChart from '@/components/TradingChart';\nimport PerformanceDashboard from '@/components/PerformanceDashboard';\nimport { StrategyParams } from '@/components/BotControl';\n\n// Dynamically import BotControl with no SSR to prevent wallet-related issues\nconst BotControl = dynamic(() => import('@/components/BotControl'), { ssr: false });\n\nexport default function Home() {\n  const [connected, setConnected] = useState(false);\n  const [currentSymbol] = useState('SOLUSD');\n  const [strategyParams, setStrategyParams] = useState<StrategyParams>({\n    type: 'Multi-indicator',\n    indicators: [\n      { type: 'SMA', parameters: { period: 14 } },\n      { type: 'RSI', parameters: { period: 30 } },\n      { type: 'MACD', parameters: { fast: 12, slow: 26 } }\n    ],\n    amount: 0.5,\n    pair: 'SOL/USDC',\n    action: 'buy'\n  });\n\n  // Check if wallet is connected\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      if (typeof window !== 'undefined' && window.phantom?.solana) {\n        try {\n          // Check if already connected\n          const isPhantomConnected = window.phantom.solana.isConnected;\n          setConnected(isPhantomConnected);\n        } catch (error) {\n          console.error('Error checking wallet connection:', error);\n          setConnected(false);\n        }\n      }\n    };\n    \n    checkWalletConnection();\n    \n    // Set up event listener for wallet connection changes\n    const handleWalletConnectionChange = () => {\n      if (window.phantom?.solana) {\n        setConnected(window.phantom.solana.isConnected);\n      }\n    };\n    \n    if (typeof window !== 'undefined') {\n      window.addEventListener('phantomConnectionChanged', handleWalletConnectionChange);\n      \n      return () => {\n        window.removeEventListener('phantomConnectionChanged', handleWalletConnectionChange);\n      };\n    }\n  }, []);\n\n  // Update strategy params when config changes\n  const handleStrategyUpdate = (newParams: any) => {\n    setStrategyParams(newParams);\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-8\">\n      {!connected && (\n        <div className=\"fixed top-0 left-0 right-0 z-50 p-4 bg-blue-600\">\n          <div className=\"container mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-white mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span className=\"text-white font-medium\">\n                Connect your wallet to start trading\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"pt-16\">\n        <h1 className=\"text-3xl font-bold\">SolBotX AI Trading Bot</h1>\n        \n        {!connected ? (\n          <div className=\"bg-gray-800 p-8 rounded-lg text-center mt-8\">\n            <h2 className=\"text-2xl font-bold mb-4\">Connect Your Wallet</h2>\n            <p className=\"text-gray-400 mb-6\">\n              Please connect your Phantom wallet to start using the SolBotX trading bot.\n            </p>\n            <p className=\"text-gray-400\">\n              Click the Connect Wallet button in the top right corner.\n            </p>\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mt-8\">\n              <div className=\"lg:col-span-1\">\n                <StrategyConfig onStrategyUpdate={handleStrategyUpdate} />\n                <div className=\"mt-6\">\n                  <BotControl strategyParams={strategyParams} />\n                </div>\n              </div>\n              <div className=\"lg:col-span-2\">\n                <TradingChart symbol={currentSymbol} />\n              </div>\n            </div>\n            \n            <div className=\"mt-8\">\n              <PerformanceDashboard \n                allocatedCapital={100}\n                maxDrawdown={20}\n                profitTarget={30}\n                slippage={0.5}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Add type definition for Phantom wallet\ndeclare global {\n  interface Window {\n    phantom?: {\n      solana?: {\n        isPhantom?: boolean;\n        isConnected?: boolean;\n        connect: () => Promise<{ publicKey: { toString: () => string } }>;\n        disconnect: () => Promise<void>;\n      };\n    };\n  }\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;;AANA;;;;;;AASA,6EAA6E;AAC7E,MAAM,aAAa,CAAA,GAAA,kKAAA,CAAA,UAAO,AAAD,EAAE;;;;;;IAA2C,KAAK;;KAArE;AAES,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;QACnE,MAAM;QACN,YAAY;YACV;gBAAE,MAAM;gBAAO,YAAY;oBAAE,QAAQ;gBAAG;YAAE;YAC1C;gBAAE,MAAM;gBAAO,YAAY;oBAAE,QAAQ;gBAAG;YAAE;YAC1C;gBAAE,MAAM;gBAAQ,YAAY;oBAAE,MAAM;oBAAI,MAAM;gBAAG;YAAE;SACpD;QACD,QAAQ;QACR,MAAM;QACN,QAAQ;IACV;IAEA,+BAA+B;IAC/B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,MAAM;wDAAwB;oBAC5B,IAAI,aAAkB,eAAe,OAAO,OAAO,EAAE,QAAQ;wBAC3D,IAAI;4BACF,6BAA6B;4BAC7B,MAAM,qBAAqB,OAAO,OAAO,CAAC,MAAM,CAAC,WAAW;4BAC5D,aAAa;wBACf,EAAE,OAAO,OAAO;4BACd,QAAQ,KAAK,CAAC,qCAAqC;4BACnD,aAAa;wBACf;oBACF;gBACF;;YAEA;YAEA,sDAAsD;YACtD,MAAM;+DAA+B;oBACnC,IAAI,OAAO,OAAO,EAAE,QAAQ;wBAC1B,aAAa,OAAO,OAAO,CAAC,MAAM,CAAC,WAAW;oBAChD;gBACF;;YAEA,wCAAmC;gBACjC,OAAO,gBAAgB,CAAC,4BAA4B;gBAEpD;sCAAO;wBACL,OAAO,mBAAmB,CAAC,4BAA4B;oBACzD;;YACF;QACF;yBAAG,EAAE;IAEL,6CAA6C;IAC7C,MAAM,uBAAuB,CAAC;QAC5B,kBAAkB;IACpB;IAEA,qBACE,6LAAC;QAAI,WAAU;;YACZ,CAAC,2BACA,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,OAAM;gCAA6B,WAAU;gCAA0B,MAAK;gCAAO,SAAQ;gCAAY,QAAO;0CACjH,cAAA,6LAAC;oCAAK,eAAc;oCAAQ,gBAAe;oCAAQ,aAAa;oCAAG,GAAE;;;;;;;;;;;0CAEvE,6LAAC;gCAAK,WAAU;0CAAyB;;;;;;;;;;;;;;;;;;;;;;0BAQjD,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAqB;;;;;;oBAElC,CAAC,0BACA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA0B;;;;;;0CACxC,6LAAC;gCAAE,WAAU;0CAAqB;;;;;;0CAGlC,6LAAC;gCAAE,WAAU;0CAAgB;;;;;;;;;;;6CAK/B;;0CACE,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC,uIAAA,CAAA,UAAc;gDAAC,kBAAkB;;;;;;0DAClC,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAW,gBAAgB;;;;;;;;;;;;;;;;;kDAGhC,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC,qIAAA,CAAA,UAAY;4CAAC,QAAQ;;;;;;;;;;;;;;;;;0CAI1B,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC,6IAAA,CAAA,UAAoB;oCACnB,kBAAkB;oCAClB,aAAa;oCACb,cAAc;oCACd,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAQ1B;GA9GwB;MAAA","debugId":null}}]
}